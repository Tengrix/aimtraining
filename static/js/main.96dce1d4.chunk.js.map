{"version":3,"sources":["Game.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Game","setTimeHandler","time","onClick","className","initState","timeState","colors","App","useState","start","setStart","startTime","setStartTime","setTime","circle","setCircle","point","setPoint","num","startGame","createRandomCircle","setInterval","size","getRandomNumber","x","y","color","Math","floor","random","length","pointHandler","style","width","height","top","left","backgroundColor","max","min","map","el","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wMAgBeA,MARf,YAAiD,IAAlCC,EAAiC,EAAjCA,eAAgBC,EAAiB,EAAjBA,KAG3B,OACI,yBAAQC,QAAS,kBAAMF,EAAeC,IAAOE,UAAW,WAAxD,UAAqEF,EAArE,UCRFG,EAAY,CAAC,QAAS,eACtBC,EAAY,CAAC,EAAG,GAAI,GAAI,IACxBC,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WA0F9EC,MAxFf,WAAgB,IAAD,EACeC,oBAAkB,GADjC,mBACJC,EADI,KACGC,EADH,OAEuBF,oBAAkB,GAFzC,mBAEJG,EAFI,KAEOC,EAFP,OAGaJ,mBAAwB,MAHrC,mBAGJP,EAHI,KAGEY,EAHF,OAIiBL,mBAAS,yBAJ1B,mBAIJM,EAJI,KAIIC,EAJJ,OAKaP,mBAAiB,GAL9B,mBAKNQ,EALM,KAKCC,EALD,KASLjB,EAAiB,SAACkB,GACpBC,EAAUD,GACVE,KAGED,EAAY,SAAClB,GACfoB,aAAY,WAEJR,EADS,IAATZ,EACQ,EAEAA,OAEb,KAEHW,GAAa,IAGXQ,EAAqB,WACvB,IAAIE,EAAOC,EAAgB,GAAI,IACzBC,EAAID,EAAgB,EAAG,IAAMD,GAC7BG,EAAIF,EAAgB,EAAG,IAAMD,GAC/BI,EAAQpB,EAAOqB,KAAKC,MAAMD,KAAKE,SAAWvB,EAAOwB,SACrDf,EAAU,qBAAKb,QAAS6B,EAAc5B,UAAW,SAClC6B,MAAO,CACHC,MAAM,GAAD,OAAKX,EAAL,MACLY,OAAO,GAAD,OAAKZ,EAAL,MACNa,IAAI,GAAD,OAAKV,EAAL,MACHW,KAAK,GAAD,OAAKZ,EAAL,MACJa,gBAAgB,GAAD,OAAKX,QAGrCH,EAAkB,SAACe,EAAaC,GAClC,OAAOZ,KAAKC,MAAMD,KAAKE,UAAYS,EAAMC,EAAM,GAAKA,IAElDR,EAAe,WACjBd,EAASD,KACTI,KAWJ,OACI,sBAAKjB,UAAU,MAAf,UACI,sBAAKA,UAAWM,EAAQ,YAAc,SAAtC,UACI,8CACA,yBAAQN,UAAW,QAASD,QAtDnB,WACjBQ,GAAS,IAqDD,cAAqDN,EAAU,SAEnE,sBAAKD,UAAW,SAAhB,UACI,mCAAMC,EAAU,GAAhB,OACA,oBAAID,UAAW,YAAf,SACKE,EAAUmC,KAAI,SAACC,EAAIC,GAAL,OACX,6BACI,cAAC,EAAD,CACIzC,KAAMwC,EACNzC,eAAgBA,KAHf0C,WAQrB,qBAAKvC,UAAWQ,EAAY,YAAc,SAA1C,SACI,gCACKV,EAAS,EAAI,wCAAU,uCAAUA,EAAS,IAAM,IAAKA,EAA9B,YAAqD,GAC7E,qBAAKE,UAAW,QAAhB,SAAmC,IAATF,EAAaa,EACnC,qBAAIX,UAAW,SAAf,oBAAiCa,gBCxE1C2B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.96dce1d4.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\n\ntype GameType = {\n    setTimeHandler: (num: number) => void\n    time: number\n}\n\nfunction Game({setTimeHandler, time}: GameType) {\n\n\n    return (\n        <button onClick={() => setTimeHandler(time)} className={'time-btn'}>{time}sec</button>\n    );\n}\n\nexport default Game\n","import React, {useState} from 'react';\nimport './App.css';\nimport Game from \"./Game\";\n\nconst initState = ['Start', 'Choose time']\nconst timeState = [5, 10, 20, 30]\nconst colors = ['#0066CC', '#00CC66', '#6600CC', '#FF9933', '#66FF66', '#FF3333', '#FFFF33', '#FFFF99']\n\nfunction App() {\n    const [start, setStart] = useState<boolean>(false)\n    const [startTime, setStartTime] = useState<boolean>(false)\n    const [time, setTime] = useState<number | null>(null)\n    const [circle, setCircle] = useState(<div/>)\n    let [point, setPoint] = useState<number>(0)\n    const startHandler = () => {\n        setStart(true)\n    }\n    const setTimeHandler = (num: number) => {\n        startGame(num)\n        createRandomCircle()\n    }\n\n    const startGame = (time: number) => {\n        setInterval(() => {\n            if (time === 0) {\n                setTime(0)\n            } else {\n                setTime(time--)\n            }\n        }, 1000)\n\n        setStartTime(true)\n    }\n\n    const createRandomCircle = () => {\n        let size = getRandomNumber(10, 60)\n        const x = getRandomNumber(0, 500 - size)\n        const y = getRandomNumber(0, 500 - size)\n        let color = colors[Math.floor(Math.random() * colors.length)]\n        setCircle(<div onClick={pointHandler} className={'circle'}\n                       style={{\n                           width: `${size}px`,\n                           height: `${size}px`,\n                           top: `${y}px`,\n                           left: `${x}px`,\n                           backgroundColor: `${color}`\n                       }}/>)\n    }\n    const getRandomNumber = (max: number, min: number) => {\n        return Math.floor(Math.random() * (max - min + 1) + min)\n    }\n    const pointHandler = () => {\n        setPoint(point++)\n        createRandomCircle()\n\n    }\n    const newGame = () => {\n        setCircle(<div/>)\n        setStart(false)\n        setStartTime(false)\n        setPoint(0)\n        setTime(0)\n    }\n\n    return (\n        <div className=\"App\">\n            <div className={start ? 'screen up' : 'screen'}>\n                <h1>Aim Training</h1>\n                <button className={'start'} onClick={startHandler}> {initState[0]}</button>\n            </div>\n            <div className={'screen'}>\n                <h1> {initState[1]} </h1>\n                <ul className={'time-list'}>\n                    {timeState.map((el, i) =>\n                        <li key={i}>\n                            <Game\n                                time={el}\n                                setTimeHandler={setTimeHandler}/>\n                        </li>\n                    )}\n                </ul>\n            </div>\n            <div className={startTime ? 'screen up' : 'screen'}>\n                <div>\n                    {time ! > 0 ? <h3> Left <span>00:{time ! < 10 && '0'}{time}sec</span></h3> : ''}\n                    <div className={'board'}>{time !== 0 ? circle :\n                        <h1 className={'screen'}>Score: {point}</h1>\n                    }\n                    </div>\n                    {/*{time===0&&<button onClick={newGame} className={'new'}>New game</button>}*/}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}