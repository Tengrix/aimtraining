{"version":3,"sources":["Game.tsx","Result.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Game","React","memo","setTimeHandler","time","useState","currentTime","onClick","className","Result","startTime","circle","point","newGame","restartTime","initState","timeState","colors","App","start","setStart","setStartTime","setTime","setCircle","setPoint","setRestartTime","num","startGame","createRandomCircle","setInterval","size","getRandomNumber","x","y","color","Math","floor","random","length","pointHandler","style","width","height","top","left","backgroundColor","max","min","map","el","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.472b9b75.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\n\ntype GameType = {\n    setTimeHandler: (num: number) => void\n    time: number\n}\n\nconst Game =  React.memo(({setTimeHandler, time}: GameType) => {\n    const [currentTime,setCurrentTime] = useState<number>(time)\n    return (\n        <button onClick={() => setTimeHandler(currentTime)} className={'time-btn'}>{currentTime}sec</button>\n    );\n})\n\nexport default Game\n","import React, {ReactElement} from \"react\";\r\ntype ResultType = {\r\n    startTime:boolean;\r\n    time:number | null;\r\n    circle:ReactElement;\r\n    point:number;\r\n    newGame:()=>void;\r\n    // restartGame:(value:number|null) =>void;\r\n    restartTime:number | null;\r\n}\r\nconst Result = React.memo( ({startTime,time,circle,point,newGame,restartTime}:ResultType) => {\r\n    return(\r\n        <div className={startTime ? 'screen up' : 'screen'}>\r\n            <div>\r\n                {time ! > 0 ? <h3> Left <span>00:{time ! < 10 && '0'}{time}sec</span></h3> : ''}\r\n                <div className={'board'}>{time !== 0 ? circle :\r\n                    <h1 className={'screen'}>Score: {point}</h1>\r\n                }\r\n                </div>\r\n                {time===0&&\r\n                <span>\r\n                    <button onClick={newGame} className={'new'}>Try it Again</button>\r\n                </span>}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\nexport default Result;","import React, {useState} from 'react';\nimport './App.css';\nimport Game from \"./Game\";\nimport Result from \"./Result\";\n\nconst initState = ['Start', 'Choose time']\nconst timeState = [5, 10, 20, 30]\nconst colors = ['#0066CC', '#00CC66', '#6600CC', '#FF9933', '#66FF66', '#FF3333', '#FFFF33', '#FFFF99']\n\nfunction App() {\n    const [start, setStart] = useState<boolean>(false)\n    const [startTime, setStartTime] = useState<boolean>(false)\n    const [time, setTime] = useState<number | null>(null)\n    const [circle, setCircle] = useState(<div/>)\n    let [point, setPoint] = useState<number>(0)\n    let [restartTime, setRestartTime] = useState<number | null>(null)\n    const startHandler = () => {\n        setStart(true)\n        setTime(null)\n\n    }\n    const setTimeHandler = (num: number) => {\n        startGame(num)\n        createRandomCircle()\n        setRestartTime(num)\n    }\n\n    const startGame = (time: number|null) => {\n        setInterval(() => {\n            if (time === 0) {\n                setStart(true)\n            } else {\n                // @ts-ignore\n                setTime(--time)\n            }\n        }, 1000)\n        setStartTime(true)\n    }\n\n    const createRandomCircle = () => {\n        let size = getRandomNumber(10, 60)\n        const x = getRandomNumber(0, 500 - size)\n        const y = getRandomNumber(0, 500 - size)\n        let color = colors[Math.floor(Math.random() * colors.length)]\n        setCircle(<div onClick={pointHandler} className={'circle'}\n                       style={{\n                           width: `${size}px`,\n                           height: `${size}px`,\n                           top: `${y}px`,\n                           left: `${x}px`,\n                           backgroundColor: `${color}`\n                       }}/>)\n    }\n    const getRandomNumber = (max: number, min: number) => {\n        return Math.floor(Math.random() * (max - min + 1) + min)\n    }\n    const pointHandler = () => {\n        createRandomCircle()\n        if(restartTime===0){\n            setPoint(0)\n        }else{\n            setPoint(++point)\n        }\n\n    }\n    const newGame = () => {\n        setCircle(<div/>)\n        setStart(false)\n        setStartTime(false)\n        setPoint(0)\n        setTime(null)\n    }\n    // const restartGame = (time:number|null) => {\n    //     setPoint(0)\n    //     startGame(time)\n    //     setCircle(<div/>)\n    //     createRandomCircle()\n    // }\n    return (\n        <div className=\"App\">\n            <div className={start ? 'screen up' : 'screen'}>\n                <h1>Aim Training</h1>\n                <button className={'start'} onClick={startHandler}> {initState[0]}</button>\n            </div>\n            <div className={'screen'}>\n                <h1> {initState[1]} </h1>\n                <ul className={'time-list'}>\n                    {timeState.map((el, i) =>\n                        <li key={i}>\n                            <Game\n                                time={el}\n                                setTimeHandler={setTimeHandler}/>\n                        </li>\n                    )}\n                </ul>\n            </div>\n             <Result\n                 startTime={startTime}\n                 time={time}\n                 circle={circle}\n                 point={point}\n                 newGame={newGame}\n                 // restartGame={restartGame}\n                 restartTime={restartTime}\n             />\n            {/*<div className={startTime ? 'screen up' : 'screen'}>*/}\n            {/*    <div>*/}\n            {/*        {time ! > 0 ? <h3> Left <span>00:{time ! < 10 && '0'}{time}sec</span></h3> : ''}*/}\n            {/*        <div className={'board'}>{time !== 0 ? circle :*/}\n            {/*            <h1 className={'screen'}>Score: {point}</h1>*/}\n            {/*        }*/}\n            {/*        </div>*/}\n            {/*        {time===0&&*/}\n            {/*    <span>*/}\n            {/*        One more time ?*/}\n            {/*        <button onClick={newGame} className={'new'}>Yes</button>*/}\n            {/*        <button onClick={()=>restartGame(restartTime)} className={'new'}>No</button>*/}\n            {/*    </span>}*/}\n            {/*    </div>*/}\n            {/*</div>*/}\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}